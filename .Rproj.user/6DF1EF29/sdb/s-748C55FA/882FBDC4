{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Graphic Analysis of Lottery Data\"\nauthor: \"coop711\"\ndate: \"2015년 3월 14일\"\noutput: html_document\n---\n\nLottery Data Input\n-----------------\n\n\n- Pick-it 1976 New Jersey Lottery Game\n\n```{r}\nlottery <- read.table(\"../data/lottery.txt\",header=T)\nstr(lottery)\nhead(lottery)\n```\n\n- 기초통계량을 계산하고 `lottery.number`의 경우 이론값과 비교. 이론값이라 함은?\n\n```{r}\nsummary(lottery)\napply(lottery, 2, sd)\n```\n\nGraphic Analysis on lottery.number\n----------------------------------\n\n- 당첨번호는 0(사실상 000)에서 999 사이에 254회 추출한 랜덤표본으로 볼 수 있음. `stem()`을 이용하여 줄기-잎 그림을 그리고, 히스토그램 작성.\n\n```{r}\nstem(lottery$lottery.number, scale = 0.5)\n```\n\n```{r fig.width=4, fig.height=4}\nh10<-hist(lottery$lottery.number)\n```\n\n- 메인 타이틀과 x축의 좌표이름, y축의 좌표이름의 디폴트값이 어떻게 주어지는지 살피고, 히스토그램 작성에 계산된 값들 확인(특히 `$breaks`, `$counts`, `$density` 유의)\n\n```{r}\nlist(breaks=h10$breaks, counts=h10$counts, density=h10$density)\n```\n\n- 각 계급의 경계선에 있는 관찰값들을 어떻게 처리하는 지 몇 가지 조건을 바꿔가면서 관찰. `right=F`로 인하여 `$counts`가 어덯게 변하였는가? `attach()`의 역할은 무엇인가?. (작업을 끝내기 전에 반드시 `detach()`할 것). 실제 취하는 값을 1000에서 999로 바꿨을 때, 그리고 `include.lowest=F`로 했을 때 각각 어떤 일이 일어나는지 확인하고 이유를 생각해 볼 것. `list()`로 표현하려는 것은 무엇이며 이름을 붙인 까닭은?\n\n```{r fig.width=8, fig.height=4}\nattach(lottery)\npar(mfrow=c(1,2))\nh10.2<-hist(lottery.number, breaks=seq(0,1000,by=100),include.lowest=T)\nh10.3<-hist(lottery.number, breaks=seq(0,1000,by=100),right=F)\nlist(breaks=h10.2$breaks, counts=h10.2$counts, density=h10.2$density)\nlist(breaks=h10.3$breaks, counts=h10.3$counts, density=h10.3$density)\n```\n\n- `breaks` 대신 `nclass=10` 을 사용하였을 때 결과 비교.\n\n```{r fig.width=4, fig.height=4}\npar(mfrow=c(1,1))\nh10.4<-hist(lottery.number, nclass=10)\nlist(breaks=h10.4$breaks, counts=h10.4$counts, density=h10.4$density)\n```\n\n- 다양한 `nclass` 값에 대하여 히스토그램 작성. `nclass`로 요구했을 때 제대로 잘 작동하는가 확인.\n\n```{r fig.width=12, fig.height=12}\nopar<-par(no.readonly=TRUE)\npar(mfrow=c(3,3))\nhist(lottery.number, nclass=10, sub=\"nclass=10\")\nhist(lottery.number, nclass=9, sub=\"ncalss=9\")\nhist(lottery.number, nclass=8, sub=\"nclass=8\")\nhist(lottery.number, nclass=7, sub=\"nclass=7\")\nhist(lottery.number, nclass=6, sub=\"nclass=6\")\nhist(lottery.number, nclass=5, sub=\"nclass=5\")\nhist(lottery.number, nclass=4, sub=\"nclass=4\")\nhist(lottery.number, nclass=3, sub=\"nclass=3\")\nhist(lottery.number, nclass=2, sub=\"nclass=2\")\n```\n\n이 작업은 `mapply()`를 이용하면 훨씬 간단하게 처리할 수 있다. `lottery.number`를 `list`로 변환해서 반복 사용할 수 있도록 작업한 데 유의하라.\n\n```{r fig.width=12, fig.height=12}\npar(mfrow=c(3,3))\nmapply(hist, rep(list(lottery$lottery.number), 9), xlab=\"Numbers Drawn\", nclass=10:2, main=paste(\"nclass = \", 10:2))\n```\n\n- `nclass=9, 8`은 모두 `nclass=10`과 같고, `nclass=7, 6, 4`는 모두 `nclass=5`와 같으며, `nclass=3` 인 경우도 요구와 다르게 나온 점에 유의하고 일부 계산값 확인. argument 중에 `sub=\"nclass=3\"` 을 놓아 둔채 `plot=F` 를 하면 어떻게 되는지 시험해 보시오.\n\n```{r fig.width=8, fig.height=4}\npar(mfrow=c(1,2))\nh4<-hist(lottery.number, nclass=4, plot=F)\nh3<-hist(lottery.number, nclass=3, plot=F)\nlist(breaks=h4$breaks, counts=h4$counts, density=h4$density)\nlist(breaks=h3$breaks, counts=h3$counts, density=h3$density)\n```\n\n- `nclass=4`, `nclass=3` 을 그리려면 `breaks` 조정. `breaks` 가 보다 확실한 방법!!\n\n```{r fig.width=8, fig.height=4}\npar(mfrow=c(1,2))\nh4.breaks<-hist(lottery.number, breaks=seq(0,1000, by=250), sub=\"(with Breaks)\")\nh3.breaks<-hist(lottery.number, breaks=seq(0,999, by=333), sub=\"(with Breaks)\")\nlist(breaks=h4.breaks$breaks, counts=h4.breaks$counts, density=h4.breaks$density)\nlist(breaks=h3.breaks$breaks, counts=h3.breaks$counts, density=h3.breaks$density)\n```\n\n- `breaks`로 계급의 갯수 조정. \n\n```{r fig.width=12, fig.height=12}\nopar<-par(no.readonly=TRUE)\npar(mfrow=c(3,3))\nhist(lottery.number, breaks=seq(0,1000, by=100), sub=\"(with Breaks)\")\nhist(lottery.number, breaks=seq(0,999, by=111), sub=\"(with Breaks)\")\nhist(lottery.number, breaks=seq(0,1000, by=125), sub=\"(with Breaks)\")\nhist(lottery.number, breaks=seq(0,1001, by=143), sub=\"(with Breaks)\")\nhist(lottery.number, breaks=seq(0,1002, by=167), sub=\"(with Breaks)\")\nhist(lottery.number, breaks=seq(0,1000, by=200), sub=\"(with Breaks)\")\nhist(lottery.number, breaks=seq(0,1000, by=250), sub=\"(with Breaks)\")\nhist(lottery.number, breaks=seq(0,999, by=333), sub=\"(with Breaks)\")\nhist(lottery.number, breaks=seq(0,1000, by=500), sub=\"(with Breaks)\")\n```\n\n이 또한  `mapply`를 활용하여 보다 간단히 할 수 있다.\n\n```{r}\nbreaks.number<-list(nclass.10=seq(0,1000, by=100), nclass.9=seq(0,999, by=111), nclass.8=seq(0,1000, by=125), nclass.7=seq(0,1001, by=143), nclass.6=seq(0,1002, by=167), nclass.5=seq(0,1000, by=200), nclass.4=seq(0,1000, by=250), nclass.3=seq(0,999, by=333), nclass.2=seq(0,1000, by=500))\n```\n\n```{r fig.width=12, fig.height=12}\npar(mfrow=c(3,3))\nmapply(hist, rep(list(lottery$lottery.number), 9), xlab=\"Numbers Drawn\", breaks=breaks.number, main=paste(\"nclass = \", 10:2))\n```\n\n- 히스토그램의 정보를 보다 알기 쉽게 타이틀과 좌표명을 손보려면 `ann=F` 사용. 다른 히스토그램들에도 적용해 볼 것.\n\n```{r fig.width=4, fig.height=4}\npar(mfrow=c(1,1))\nhist(lottery.number, breaks=seq(0,1000,by=250),ann=F)\ntitle(main=\"Histogram of Numbers Drawn\", sub=\"(with Breaks Argument)\", xlab=\"Number\", ylab=\"Frequency\")\n```\n\n---\n\n---\n\nDistribution of lottery.payoff\n-------------------------------\n\n- 이제 당첨번호와 당첨금액과의 관계를 살피기 전에 잠깐 당첨번호의 분포를 살펴보면\n\n```{r fig.width=6, fig.height=4}\nhist(lottery.payoff)\n```\n\n- 평균과 중앙값을 계산하여 화살표와 점선으로 표시하면 다음과 같이 할 수 있는데, 어느 것이 평균이고, 어느 것이 중앙값인가? \n\n```{r fig.width=6, fig.height=4}\nmean.payoff<-mean(lottery.payoff)\nmed.payoff<-median(lottery.payoff)\nhist(lottery.payoff,axes=F,ylim=c(-10,100))\naxis(side=1,at=seq(0,1000,by=100),labels=paste(seq(0,1000,by=100)))\narrows(x0=mean.payoff,y0=-10, x1=mean.payoff, y1=0, length=0.1, code=2)\nabline(v=med.payoff,lty=2,col=\"red\")\naxis(side=2,at=seq(0,100,by=20),labels=paste(seq(0,100,by=20)))\n```\n\n- 확률 히스토그램으로 바꾸고 중앙값의 왼쪽 부분에 빗금을 그었다. 전체 면적의 1/2이 모여 있는 것으로 보이는가?\n\n```{r fig.width=6, fig.height=4}\nh.payoff<-hist(lottery.payoff, plot=F)\nhist(lottery.payoff, prob=T)\nabline(v=med.payoff,lty=2,col=\"red\")\nx.polygon<-c(h.payoff$breaks[1:3], rep(c(med.payoff,rev(h.payoff$breaks[1:3])), each=2))\ny.polygon<-c(rep(0,4), rep(rev(h.payoff$density[1:3]), each=2), 0)\npolygon(x=x.polygon, y=y.polygon, density=20)\n```\n\n\nThe Relationship between lottery.number and lottery.payoff\n----------------------------------------------------------\n\n- 이제 두 변수의 산점도를 그려보자.\n\n```{r fig.height=4}\nplot(lottery.number, lottery.payoff)\n```\n\n- 점의 모양을 바꾸고, 당첨금액이 600불 이상인 당첨번호들을 찾기 위하여 `identify()` 함수를 이용하면 마우스로 직접 찾을 수 있으나 r markdown 에서는 작동하지 않음. \n\n```{r fig.height=4}\nplot(lottery.number, lottery.payoff,pch=20)\nabline(h=600,lty=2)\nidentify(lottery.number, lottery.payoff, n=5, labels=paste(lottery.number))\n```\n\n- `which()` 함수와 subscripting(`[  ]`) 을 이용하여 찾아보면 \n\n```{r fig.height=4}\nhigh.payoff<-which(lottery.payoff>=600)\nhigh.payoff\nlottery.number[high.payoff]\nplot(lottery.number, lottery.payoff,pch=20)\nabline(h=600,lty=2)\ntext(x=lottery.number[high.payoff],y=lottery.payoff[high.payoff],labels=lottery.number[high.payoff],pos=4)\n```\n\n- 당첨금액 상위 10위까지의 당첨번호를 살펴보면\n\n```{r fig.height=4}\no.payoff<-order(lottery.payoff,decreasing=TRUE)\nlottery.payoff[o.payoff][1:10]\nlottery.number[o.payoff][1:10]\n```\n\n- 당첨번호와 당첨금액의 관계를 살피기 위하여 y축의 범위를 조정하고, 격자를 설치하면\n\n```{r fig.height=4}\nplot(lottery.number, lottery.payoff,pch=20, ylim=c(0,1000))\nabline(h=seq(0,1000,by=250),lty=2)\nabline(v=seq(0,1000,by=100),lty=2)\n```\n\n- 흐름을 파악하기 위하여 local smoother, `lowess()` 를 활용.\n\n```{r fig.height=4}\nplot(lottery.number, lottery.payoff,pch=20, ylim=c(0,1000))\nabline(h=seq(0,1000,by=250),lty=2)\nabline(v=seq(0,1000,by=100),lty=2)\nlines(lowess(lottery.number,lottery.payoff, f=1/3),col=\"blue\")\nlines(lowess(lottery.number,lottery.payoff, f=2/3),col=\"red\")\n```\n\n- 이제 당첨금액이 높은 당첨번호들은 숫자가 중복되는 경우가 많고, 당첨번호가 0에서 100 이하인 경우에 당첨금액이 높은지 생각해 보자. `detach(lottery)`를 하지 않고 `deatch()`만 해도 되는 이유는 뭘까? `save(file=filename, list=ls())` 와 같은 것이 `save.image(file=filename)` 임. 확인하기를\n\n```{r}\ndetach()\npar(opar)\nsave(file=\"./lottery.RData\", list = ls())\n```\n```\nsavehistory(\"lottery.Rhistory\")\n```\n",
    "created" : 1495866094381.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1602873795",
    "id" : "882FBDC4",
    "lastKnownWriteTime" : 1495866800,
    "last_content_update" : 1495866800718,
    "path" : "~/Google 드라이브/Works/Class/Stat_Graphics/R.WD/lottery/R/lottery_0507.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}